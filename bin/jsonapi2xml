#!/usr/bin/perl

use strict;
use warnings;

use Mojolicious::Lite;
use Mojo::ByteStream qw(b);
use Scalar::Util qw(blessed reftype);
use Data::Plist::XMLWriter;
use Mojo::JSON qw(decode_json);
use LWP::UserAgent;
use URI;

our $VERSION = '0.01';

plugin 'JSONConfig';

my $ua = LWP::UserAgent->new;

get '/*url' => sub {
    my $self = shift;
    my $url  = $self->param('url');
    my $res  = get_url( $ua, $url );
    if ( $res->is_success ) {
        my $xml = json2plist( $res->decoded_content );
        $self->render( format => 'xml', data => b($xml)->encode );
    }
    else {
        $self->render( text => $res->status_line, code => 500 );
    }
    return;
};

app->start;

sub get_url {
    my ( $ua, $url ) = @_;
    my $config = config_for_url($url);
    my $scheme = $config->{ssl} ? 'https' : 'http';

    $url = "$scheme://$url";

    my $auth = $config->{auth} || 'no_auth';
    my %auth_method = (
        'no_auth'    => \&get_url_plain,
        'oauth'      => \&get_url_oauth,
        'basic_auth' => \&get_url_basic_auth,
    );
    my $get = $auth_method{$auth};
    return if not defined $get;
    return $get->( $ua, $url, $config );
}

sub config_for_url {
    my $url    = shift;
    my $config = app->config;
    for my $spec ( @{ $config->{apis} } ) {
        if ( index( $url, $spec->{base} ) == 0 ) {
            return $spec;
        }
    }
    return;
}

sub get_url_plain {
    my ( $ua, $url, $config ) = @_;
    return $ua->get($url);
}

sub get_url_basic_auth {
    my ( $ua, $url, $config ) = @_;
    $url = URI->new($url);
    $ua->credentials(
        $url->host_port, $config->{realm},
        $config->{user}, $config->{password}
    );
    return $ua->get($url);
}

sub get_url_oauth {
    my ( $ua, $url, $config ) = @_;
    require Net::OAuth::Simple;
    my $client = Net::OAuth::Simple->new(
        protocol_version => $config->{oauth_protocol}
        ? $config->{oauth_protocol}
        : '1.0a',
        browser => $ua,
        tokens  => {
            consumer_key        => $config->{oauth_consumer_key},
            consumer_secret     => $config->{oauth_consumer_secret},
            access_token        => $config->{oauth_access_key},
            access_token_secret => $config->{oauth_access_secret},
        }
    );
    my $res = $client->make_restricted_request( $url, 'GET' );
    return $res;
}

sub json2plist {
    my $json = shift;
    my $ref  = decode_json( b($json)->encode );
    stringify_objects($ref);
    my $converter = Data::Plist::XMLWriter->new();
    return $converter->write($ref);
}

sub stringify_objects {
    for my $val (@_) {
        next unless my $ref = reftype $val;
        if ( blessed $val) { $val = "$val" }
        elsif ( $ref eq 'ARRAY' ) { stringify_objects(@$val) }
        elsif ( $ref eq 'HASH' )  { stringify_objects( values %$val ) }
    }
}

=pod

=head1 NAME

jsonapi2xml - cgi to convert json api to plist

=head1 DESCRIPTION

jsonapi2xml is a simple cgi-script that converts json to a plist.

It examines its PATH_INFO to get an url for a webapi returing json:

  http://example.org/cgi-bin/jsonapi2xml/api.metacpan.org/v0/release/Moose

This will return the plist for http://api.metacpan.org/v0/release/Moose.

=head1 INSTALLATION

  perl Build.PL
  ./Build.PL install

=cut

